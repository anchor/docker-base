#!/bin/sh
set +x
set +e

#
# Called on first require, to setup command line vars, and folder structure
#

build_init () {
	mkdir -p cache/stamp
	mkdir -p src/.cabal

	NAME=$1
	DOCKER_REGISTRY=$2
	DOCKER_OPTS=$3
	VERSION=$4
	UID=$(stat -c %u:%g .)

	if [ -z "$GIT_BRANCH" ]; then
		GIT_BRANCH="master"
	fi

	# If using the Jenkins-style $GIT_BRANCH format ("repo/branch"), retrieve just the branch.
	case "$GIT_BRANCH" in
		*/* ) GIT_BRANCH=`echo $GIT_BRANCH | cut -d'/' -f2`;;
	esac

	echo "Using git branch $GIT_BRANCH"

	if [ -z "$VERSION" ]; then
		VERSION=$(git show-ref refs/heads/master | awk '{print $1}')
	fi

	if [ -z "$DOCKER_REGISTRY" -o -z "$VERSION" ]; then
		echo "Usage: $0 NAME DOCKER_REGISTRY [DOCKER_OPTS] [VERSION]"
		echo
		echo "VERSION defaults to \$GIT_COMMIT"
		exit 1
	fi

	# Set the name we'll use from here on.
	IMAGE_NAME="${NAME}-${GIT_BRANCH}-${VERSION}"
}


#
# Install a base system
#

initialize () {

	if [ -f cache/stamp/initialize ] ; then
		return
	fi

	rsync -a src/ cache

	docker $DOCKER_OPTS pull $DOCKER_REGISTRY/afcowie/debian:jessie
	docker $DOCKER_OPTS pull $DOCKER_REGISTRY/engineering/haskell:latest
	touch cache/stamp/initialize
}


baseline () {
	if [ cache/stamp/baseline -nt cache/stamp/initalize ] ; then
		return
	fi

	# Kill the container if it's already running.
	docker $DOCKER_OPTS stop "$IMAGE_NAME" || true
	docker $DOCKER_OPTS rm "$IMAGE_NAME" || true

	docker $DOCKER_OPTS run --name="$IMAGE_NAME" -t \
		-v ${PWD}/cache:/src:rw \
		"$DOCKER_REGISTRY/engineering/haskell" \
		"/src/baseline ; chown -R $UID cache/"
	RC=$(docker $DOCKER_OPTS wait "$IMAGE_NAME")
	if [ $RC -ne 0 ]; then
		echo "Build returned nonzero exit status, bailing out."
	fi
	docker $DOCKER_OPTS commit "$IMAGE_NAME" "$DOCKER_REGISTRY/engineering/${NAME}:baseline"
	docker $DOCKER_OPTS rm "$IMAGE_NAME"

	touch cache/stamp/baseline
}


#
# Update (or initally clone) source code and build objects in volume
#

objects () {
	if [ cache/stamp/objects -nt cache/stamp/baseline ] ; then
		return
	fi
	docker $DOCKER_OPTS run --name="$IMAGE_NAME" -ti \
	        -v ${PWD}/cache:/src:rw \
	        $DOCKER_REGISTRY/engineering/${NAME}:baseline \
	        '/src/objects ; chown -R $UID cache/'

	RC=$(docker $DOCKER_OPTS wait "$IMAGE_NAME")
	if [ $RC -ne 0 ]; then
		echo "Build returned nonzero exit status, bailing out."
	fi
	docker $DOCKER_OPTS commit "$IMAGE_NAME" "$DOCKER_REGISTRY/engineering/${NAME}:objects"
	docker $DOCKER_OPTS rm "$IMAGE_NAME"

	touch cache/stamp/objects
}


#
# Extract the binary artifacts
#

release () {
	if [ cache/stamp/release -nt cache/stamp/objects ] ; then
		return
	fi
	docker $DOCKER_OPTS run --name="$IMAGE_NAME" -ti \
	       -v ${PWD}/cache:/src:rw \
	       $DOCKER_REGISTRY/afcowie/debian:jessie \
	       '/src/release ; chown -R $UID cache/'
	RC=$(docker $DOCKER_OPTS wait "$IMAGE_NAME")
	if [ $RC -ne 0 ]; then
		echo "Build returned nonzero exit status, bailing out."
	fi
	docker $DOCKER_OPTS commit "$IMAGE_NAME" "$DOCKER_REGISTRY/engineering/${NAME}:${VERSION}"
	docker $DOCKER_OPTS rm "$IMAGE_NAME"
	touch cache/stamp/release
}

#
#
#

publish () {
	if [ cache/stamp/publish -nt cache/stamp/release ] ; then
		return
	fi
	BUILD=$VERSION
	# Tag the built image with the SHA from the software repo.
	docker $DOCKER_OPTS tag "$DOCKER_REGISTRY/engineering/${NAME}:${VERSION}" \
		"$DOCKER_REGISTRY/engineering/${NAME}:${BUILD}"

	if [ "$GIT_BRANCH" = "master" ]; then
		# Tag the built image with "latest".
		echo "Pushing a master branch build to docker as '$NAME:latest'"
		docker $DOCKER_OPTS tag "$DOCKER_REGISTRY/engineering/${NAME}:${VERSION}" \
			"$DOCKER_REGISTRY/engineering/${NAME}:latest"
		docker $DOCKER_OPTS push "$DOCKER_REGISTRY/engineering/${NAME}:latest"
	else
		# Tag the built image with the branch.
		echo "Pushing the topic branch $GIT_BRANCH to docker as '$NAME:$GIT_BRANCH'"
		docker $DOCKER_OPTS tag "$DOCKER_REGISTRY/engineering/${NAME}:${VERSION}" \
			"$DOCKER_REGISTRY/engineering/${NAME}:${GIT_BRANCH}"
		docker $DOCKER_OPTS push "$DOCKER_REGISTRY/engineering/${NAME}:${GIT_BRANCH}"
	fi

	docker $DOCKER_OPTS push "$DOCKER_REGISTRY/engineering/${NAME}:${BUILD}"

	touch cache/stamp/publish
}

haddock () {
	tar -czf ${NAME}-documentation.tar.gz cache/.cabal/share/doc
}

