#!/bin/sh
set +x
set +e

#
# Install a base system
#

initialize () {

	set +x
	set +e

	if [ -f cache/.stamp/initialize ] ; then
		return
	fi

	IMAGE_NAME="${NAME}-${VERSION}"
	REPO="cache/${NAME}"

	rsync -a src/ cache

	docker $DOCKER_OPTS pull $DOCKER_REGISTRY/afcowie/debian:jessie
	docker $DOCKER_OPTS pull $DOCKER_REGISTRY/afcowie/haskell:latest
	touch cache/.stamp/initialize
}


baseline () {
	set +x
	set +e
	if [ cache/.stamp/baseline -nt cache/.stamp/initalize ] ; then
		return
	fi

	# Kill the container if it's already running.
	docker $DOCKER_OPTS stop "$IMAGE_NAME" || true
	docker $DOCKER_OPTS rm "$IMAGE_NAME" || true

	docker $DOCKER_OPTS run --name="$IMAGE_NAME" -t \
		-v ${PWD}/cache:/src:rw \
		"$DOCKER_REGISTRY/afcowie/haskell" \
		src/baseline
	RC=$(docker $DOCKER_OPTS wait "$IMAGE_NAME")
	if [ $RC -ne 0 ]; then
		echo "Build returned nonzero exit status, bailing out."
	fi
	docker $DOCKER_OPTS commit "$IMAGE_NAME" "$DOCKER_REGISTRY/engineering/${NAME}:baseline"
	docker $DOCKER_OPTS rm "$IMAGE_NAME"

	touch cache/.stamp/baseline
}


#
# Update (or initally clone) source code and build dependencies in volume
#

dependencies () {
	set +x
	set +e
	if [ cache/.stamp/dependencies -nt cache/.stamp/baseline ] ; then
		return
	fi
	echo "RUN THE DEPENDENCIES"
	echo docker $DOCKER_OPTS run --name="$IMAGE_NAME" -t -v ${PWD}/cache:/src:rw $DOCKER_REGISTRY/engineering/${NAME}:baseline src/dependencies 
	docker $DOCKER_OPTS run --name="$IMAGE_NAME" -t -v ${PWD}/cache:/src:rw $DOCKER_REGISTRY/engineering/${NAME}:baseline src/dependencies 

	RC=$(docker $DOCKER_OPTS wait "$IMAGE_NAME")
	if [ $RC -ne 0 ]; then
		echo "Build returned nonzero exit status, bailing out."
	fi
	docker $DOCKER_OPTS commit "$IMAGE_NAME" "$DOCKER_REGISTRY/engineering/${NAME}:dependencies"
	docker $DOCKER_OPTS rm "$IMAGE_NAME"

	touch cache/.stamp/dependencies
}

#
# Extract the binary artifacts
#

release () {
	set +x
	set +e
	if [ cache/.stamp/release -nt cache/.stamp/dependencies ] ; then
		return
	fi
	docker $DOCKER_OPTS run --name="$IMAGE_NAME" -t -v ${PWD}/cache:/src:rw $DOCKER_REGISTRY/afcowie/debian:jessie src/release
	RC=$(docker $DOCKER_OPTS wait "$IMAGE_NAME")
	if [ $RC -ne 0 ]; then
		echo "Build returned nonzero exit status, bailing out."
	fi
	docker $DOCKER_OPTS commit "$IMAGE_NAME" "$DOCKER_REGISTRY/engineering/${NAME}:${VERSION}"
	docker $DOCKER_OPTS rm "$IMAGE_NAME"
	touch cache/.stamp/release
}

publish () {
	set +x
	set +e
	if [ cache/.stamp/publish -nt cache/.stamp/release ] ; then
		return
	fi
	BUILD=$VERSION
	#BUILD=$(git --git-dir=$REPO/.git show-ref refs/heads/master | awk '{print $1}')
	# Tag the built image with the SHA from the software repo.
	docker $DOCKER_OPTS tag "$DOCKER_REGISTRY/engineering/${NAME}:${VERSION}" \
		"$DOCKER_REGISTRY/engineering/${NAME}:${BUILD}"
	# Tag the built image with "latest".
	docker $DOCKER_OPTS tag "$DOCKER_REGISTRY/engineering/${NAME}:${VERSION}" \
		"$DOCKER_REGISTRY/engineering/${NAME}:latest"
	# Push these tags to the repo.
	docker $DOCKER_OPTS push "$DOCKER_REGISTRY/engineering/${NAME}:${BUILD}"
	docker $DOCKER_OPTS push "$DOCKER_REGISTRY/engineering/${NAME}:latest"

	touch cache/.stamp/publish 
}

haddock () {
	set +x
	set +e
	tar -czf ${NAME}-documentation.tar.gz cache/.cabal/share/doc
}

get () { 
		

        #if [ -d $1/.git ] ; then
        #        cd $1
        #        git pull
        #        cd ..
 #       else
		echo "git clone https://github.com/anchor/$1.git"
		git clone https://github.com/anchor/$1.git
  #      fi
}

